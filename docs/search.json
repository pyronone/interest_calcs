[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "interest_calcs",
    "section": "",
    "text": "Just bundling up all interest calc related scripts/functions I’ve used at TH\nDocumentation",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "interest_calcs",
    "section": "Installation",
    "text": "Installation\n!git clone https://github.com/pyronone/interest_calcs.git\n%cd './interest_calcs'\n!pip install -e \".[dev]\"",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "index.html#quick-example",
    "href": "index.html#quick-example",
    "title": "interest_calcs",
    "section": "Quick Example",
    "text": "Quick Example\n\n\nCode\n# * DOC\nfrom interest_calcs import srs_pv as spv\n\npv, work, rf = spv.calc_pv(\n    monthly_pmt=74,\n    int_rate_input=2.3,\n    num_periods=40,\n    first_pmt_date=\"1-may-2020\",\n    amt_inputs=[(80.58, \"1-may-2021\")],  # amts change\n    _export=False,\n    _export_rf=False,\n)\npv\n\n\n3028.87\n\n\n\n\nCode\n# * DOC\nwork\n\n\n\n\n\n\n\n\n\n\ncompounded_int\namt\npmt_no\nmonth\nmult\nmonthly_rate\npv@1-may-2020\n\n\n\n\n0\n1.078745\n74.00\n1\n2020-05-01\n79.827127\n0.001897\n3028.871251\n\n\n1\n1.076703\n74.00\n2\n2020-06-01\n79.676001\n\n\n\n\n2\n1.074664\n74.00\n3\n2020-07-01\n79.525162\n\n\n\n\n3\n1.072630\n74.00\n4\n2020-08-01\n79.374607\n\n\n\n\n4\n1.070599\n74.00\n5\n2020-09-01\n79.224338\n\n\n\n\n5\n1.068572\n74.00\n6\n2020-10-01\n79.074354\n\n\n\n\n6\n1.066549\n74.00\n7\n2020-11-01\n78.924653\n\n\n\n\n7\n1.064530\n74.00\n8\n2020-12-01\n78.775236\n\n\n\n\n8\n1.062515\n74.00\n9\n2021-01-01\n78.626102\n\n\n\n\n9\n1.060503\n74.00\n10\n2021-02-01\n78.477250\n\n\n\n\n10\n1.058496\n74.00\n11\n2021-03-01\n78.328679\n\n\n\n\n11\n1.056492\n74.00\n12\n2021-04-01\n78.180390\n\n\n\n\n12\n1.054492\n80.58\n13\n2021-05-01\n84.970937\n\n\n\n\n13\n1.052495\n80.58\n14\n2021-06-01\n84.810073\n\n\n\n\n14\n1.050503\n80.58\n15\n2021-07-01\n84.649514\n\n\n\n\n15\n1.048514\n80.58\n16\n2021-08-01\n84.489259\n\n\n\n\n16\n1.046529\n80.58\n17\n2021-09-01\n84.329307\n\n\n\n\n17\n1.044548\n80.58\n18\n2021-10-01\n84.169658\n\n\n\n\n18\n1.042570\n80.58\n19\n2021-11-01\n84.010311\n\n\n\n\n19\n1.040596\n80.58\n20\n2021-12-01\n83.851266\n\n\n\n\n20\n1.038626\n80.58\n21\n2022-01-01\n83.692522\n\n\n\n\n21\n1.036660\n80.58\n22\n2022-02-01\n83.534078\n\n\n\n\n22\n1.034698\n80.58\n23\n2022-03-01\n83.375934\n\n\n\n\n23\n1.032739\n80.58\n24\n2022-04-01\n83.218090\n\n\n\n\n24\n1.030784\n80.58\n25\n2022-05-01\n83.060545\n\n\n\n\n25\n1.028832\n80.58\n26\n2022-06-01\n82.903298\n\n\n\n\n26\n1.026884\n80.58\n27\n2022-07-01\n82.746348\n\n\n\n\n27\n1.024940\n80.58\n28\n2022-08-01\n82.589696\n\n\n\n\n28\n1.023000\n80.58\n29\n2022-09-01\n82.433340\n\n\n\n\n29\n1.021063\n80.58\n30\n2022-10-01\n82.277280\n\n\n\n\n30\n1.019130\n80.58\n31\n2022-11-01\n82.121516\n\n\n\n\n31\n1.017201\n80.58\n32\n2022-12-01\n81.966047\n\n\n\n\n32\n1.015275\n80.58\n33\n2023-01-01\n81.810871\n\n\n\n\n33\n1.013353\n80.58\n34\n2023-02-01\n81.655990\n\n\n\n\n34\n1.011435\n80.58\n35\n2023-03-01\n81.501402\n\n\n\n\n35\n1.009520\n80.58\n36\n2023-04-01\n81.347107\n\n\n\n\n36\n1.007609\n80.58\n37\n2023-05-01\n81.193103\n\n\n\n\n37\n1.005701\n80.58\n38\n2023-06-01\n81.039392\n\n\n\n\n38\n1.003797\n80.58\n39\n2023-07-01\n80.885971\n\n\n\n\n39\n1.001897\n80.58\n40\n2023-08-01\n80.732840\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# * DOC\nrf\n\n\n\n\n\n\n\n\n\n\npmt_date\nnum_months\namt_100pct\namt_71pct\n\n\n\n\n0\n2024-06-01\n49\n3323.58\n2359.74\n\n\n1\n2024-07-01\n50\n3329.88\n2364.21\n\n\n2\n2024-08-01\n51\n3336.20\n2368.70\n\n\n3\n2024-09-01\n52\n3342.53\n2373.20\n\n\n4\n2024-10-01\n53\n3348.87\n2377.70\n\n\n5\n2024-11-01\n54\n3355.22\n2382.21\n\n\n6\n2024-12-01\n55\n3361.58\n2386.72\n\n\n7\n2025-01-01\n56\n3367.96\n2391.25\n\n\n8\n2025-02-01\n57\n3374.35\n2395.79\n\n\n9\n2025-03-01\n58\n3380.75\n2400.33\n\n\n10\n2025-04-01\n59\n3387.16\n2404.88\n\n\n11\n2025-05-01\n60\n3393.59\n2409.45\n\n\n12\n2025-06-01\n61\n3400.02\n2414.01\n\n\n13\n2025-07-01\n62\n3406.47\n2418.59\n\n\n14\n2025-08-01\n63\n3412.93\n2423.18\n\n\n15\n2025-09-01\n64\n3419.41\n2427.78\n\n\n16\n2025-10-01\n65\n3425.89\n2432.38\n\n\n17\n2025-11-01\n66\n3432.39\n2437.00\n\n\n18\n2025-12-01\n67\n3438.90\n2441.62\n\n\n19\n2026-01-01\n68\n3445.42\n2446.25\n\n\n20\n2026-02-01\n69\n3451.96\n2450.89\n\n\n21\n2026-03-01\n70\n3458.51\n2455.54\n\n\n22\n2026-04-01\n71\n3465.07\n2460.20\n\n\n23\n2026-05-01\n72\n3471.64\n2464.86\n\n\n24\n2026-06-01\n73\n3478.22\n2469.54\n\n\n25\n2026-07-01\n74\n3484.82\n2474.22\n\n\n26\n2026-08-01\n75\n3491.43\n2478.92\n\n\n27\n2026-09-01\n76\n3498.05\n2483.62\n\n\n28\n2026-10-01\n77\n3504.69\n2488.33\n\n\n29\n2026-11-01\n78\n3511.33\n2493.04\n\n\n30\n2026-12-01\n79\n3518.00\n2497.78\n\n\n31\n2027-01-01\n80\n3524.67\n2502.52\n\n\n32\n2027-02-01\n81\n3531.35\n2507.26\n\n\n33\n2027-03-01\n82\n3538.05\n2512.02\n\n\n34\n2027-04-01\n83\n3544.76\n2516.78\n\n\n35\n2027-05-01\n84\n3551.49\n2521.56\n\n\n36\n2027-06-01\n85\n3558.22\n2526.34\n\n\n37\n2027-07-01\n86\n3564.97\n2531.13\n\n\n38\n2027-08-01\n87\n3571.73\n2535.93\n\n\n39\n2027-09-01\n88\n3578.51\n2540.74\n\n\n40\n2027-10-01\n89\n3585.30\n2545.56\n\n\n41\n2027-11-01\n90\n3592.10\n2550.39\n\n\n42\n2027-12-01\n91\n3598.91\n2555.23\n\n\n43\n2028-01-01\n92\n3605.74\n2560.08\n\n\n44\n2028-02-01\n93\n3612.57\n2564.92\n\n\n45\n2028-03-01\n94\n3619.43\n2569.80\n\n\n46\n2028-04-01\n95\n3626.29\n2574.67\n\n\n47\n2028-05-01\n96\n3633.17\n2579.55\n\n\n48\n2028-06-01\n97\n3640.06\n2584.44\n\n\n49\n2028-07-01\n98\n3646.97\n2589.35\n\n\n50\n2028-08-01\n99\n3653.88\n2594.25\n\n\n51\n2028-09-01\n100\n3660.81\n2599.18\n\n\n52\n2028-10-01\n101\n3667.76\n2604.11\n\n\n53\n2028-11-01\n102\n3674.71\n2609.04\n\n\n54\n2028-12-01\n103\n3681.68\n2613.99\n\n\n55\n2029-01-01\n104\n3688.67\n2618.96\n\n\n56\n2029-02-01\n105\n3695.66\n2623.92\n\n\n57\n2029-03-01\n106\n3702.67\n2628.90\n\n\n58\n2029-04-01\n107\n3709.70\n2633.89\n\n\n59\n2029-05-01\n108\n3716.73\n2638.88",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "stco_pen_retro.html",
    "href": "stco_pen_retro.html",
    "title": "02_stco_pen_retro",
    "section": "",
    "text": "00 stco pen retro\n\nsource\n\nload_rates\n\n load_rates (src:str='c:\\\\users\\\\ronal\\\\desktop\\\\interest_calcs\\\\interest_\n             calcs\\\\.\\\\../dat/int_rates.csv')\n\n…\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsrc\nstr\nc:_calcs_calcs.../dat/int_rates.csv\nstr\n\n\nReturns\ndict\n\ndict\n\n\n\n\n\nCode\n# * DOC\nRATES = load_rates()\nRATES\n\n\nLoaded rates for 2002 to 2024\n\n\n{2002: 0.003193314,\n 2003: 0.003096709,\n 2004: 0.002458159,\n 2005: 0.00223889,\n 2006: 0.002027243,\n 2007: 0.002393245,\n 2008: 0.002539236,\n 2009: 0.002312039,\n 2010: 0.001454967,\n 2011: 0.001520552,\n 2012: 0.001413952,\n 2013: 0.001307227,\n 2014: 0.001200377,\n 2015: 0.001200377,\n 2016: 0.001035746,\n 2017: 0.00096981,\n 2018: 0.000837795,\n 2019: 0.000986299,\n 2020: 0.001200377,\n 2021: 0.000813021,\n 2022: 0.000622862,\n 2023: 0.002100561,\n 2024: 0.002547339}\n\n\n\nsource\n\n\nget_breakdown\n\n get_breakdown (pmt_date:pandas._libs.tslibs.timestamps.Timestamp,\n                dor:pandas._libs.tslibs.timestamps.Timestamp)\n\nFind number of years included in the retro payment and number of months for each year\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npmt_date\nTimestamp\npd.Timestamp - can be formatted as str\n\n\ndor\nTimestamp\npd.Timestamp - can be formatted as str\n\n\nReturns\ndict\ndict[int, int] - num months per year the retro payment spans\n\n\n\n\n\nCode\n# * TEST\nassert get_breakdown(pmt_date=\"1-dec-2023\", dor=\"1-jan-2023\") == {2023: 11}\nassert get_breakdown(pmt_date=\"1-dec-2023\", dor=\"1-jan-2021\") == {\n    2021: 12,\n    2022: 12,\n    2023: 11,\n}\n\n\n\nsource\n\n\ncalc_stco_pen_retro\n\n calc_stco_pen_retro (dor:pandas._libs.tslibs.timestamps.Timestamp,\n                      pmt_date:pandas._libs.tslibs.timestamps.Timestamp,\n                      pmt_amt:Union[float,int], bridge_end:pandas._libs.ts\n                      libs.timestamps.Timestamp=None)\n\n…\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndor\nTimestamp\n\npd.Timestamp - can be formatted as str\n\n\npmt_date\nTimestamp\n\npd.Timestamp - can be formatted as str\n\n\npmt_amt\ntyping.Union[float, int]\n\nt.Union[float, int]\n\n\nbridge_end\nTimestamp\nNone\nOnly need to include if there’s a bridge that ended before pmt_date. Can be formatted as string. Should be last day of month - eg. ‘31-may-2023’\n\n\nReturns\nfloat\n\nfloat\n\n\n\n\n\nCode\n# * TEST\nassert (\n    calc_stco_pen_retro(dor=\"1-jan-2023\", pmt_date=\"1-feb-2024\", pmt_amt=2204)\n    + calc_stco_pen_retro(\n        dor=\"1-jan-2023\", pmt_date=\"1-feb-2024\", pmt_amt=900, bridge_end=\"31-may-2023\"\n    )\n    == 33696.97\n)\nassert (\n    calc_stco_pen_retro(dor=\"1-jan-2023\", pmt_date=\"1-feb-2024\", pmt_amt=1947.83)\n    + calc_stco_pen_retro(\n        dor=\"1-jan-2023\", pmt_date=\"1-feb-2024\", pmt_amt=900, bridge_end=\"31-jul-2023\"\n    )\n    == 32145.24\n)",
    "crumbs": [
      "02_stco_pen_retro"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "00_core",
    "section": "",
    "text": "00 init fxs\n\nsource\n\nyaml_helper\n\n yaml_helper (fpath:str='./config.yaml', mode:str='r', data:dict=None)\n\nHelper function to read, write, append to files in yaml format. Checks for duplicate keys if reading or appending.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfpath\nstr\n./config.yaml\nstr\n\n\nmode\nstr\nr\nstr - r / a / w\n\n\ndata\ndict\nNone\ndict - cannot be None if writing or appending\n\n\nReturns\ndict\n\ndict - data if reading, {‘r’: 0} if writing/appending\n\n\n\n\nsource\n\n\nfp\n\n fp (relative_fp:str, base_dir:str='.')\n\nFor referencing relative file paths in package directory.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrelative_fp\nstr\n\nstr - eg. “../dir/file.txt”\n\n\nbase_dir\nstr\n.\nstr\n\n\nReturns\nstr\n\nstr\n\n\n\n\n\n\n01 utils\n\nsource\n\nfix_round\n\n fix_round (num:Union[float,int], position:int=0)\n\nPython’s built-in round function can return unexpected results. See https://docs.python.org/3/library/functions.html#round. This function returns the same result as the Excel ROUND function..\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnum\ntyping.Union[float, int]\n\nfloat or int\n\n\nposition\nint\n0\nint\n\n\nReturns\nfloat\n\nfloat\n\n\n\n\n\nCode\n# * TEST\nimport pytest\n\nwith pytest.raises(Exception, match=\"Invalid input\"):\n    fix_round(\"test\", 123)\n\nassert round(23.335, 2) == 23.34\nassert round(23.345, 2) == 23.34\nassert fix_round(23.345, 2) == 23.35\n\nassert round(-23.345, 2) == -23.34\nassert fix_round(-23.345, 2) == -23.35\n\nassert fix_round(1, 2) == 1\nassert isinstance((fix_round(1, 2)), float)\n\nassert fix_round(1.0, 2) == 1\nassert isinstance((fix_round(1.0, 2)), float)\n\nassert round(6789.2342335, 6) == 6789.234234\nassert round(6789.2342345, 6) == 6789.234234\nassert fix_round(6789.2342345, 6) == 6789.234235\n\nassert round(-6789.2342345, 6) == -6789.234234\nassert fix_round(-6789.2342345, 6) == -6789.234235\n\nassert fix_round(0.0, 2) == 0.0\nassert fix_round(-0.0, 2) == 0.0",
    "crumbs": [
      "00_core"
    ]
  },
  {
    "objectID": "srs_pv.html",
    "href": "srs_pv.html",
    "title": "01_srs_pv",
    "section": "",
    "text": "00 srs pv calc\n\nsource\n\ncalc_pv\n\n calc_pv (monthly_pmt:float, int_rate_input:float, num_periods:int,\n          first_pmt_date:str, amt_inputs:list=None, _export:bool=True,\n          _export_rf:bool=True)\n\nAssumes constant interest rate\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmonthly_pmt\nfloat\n\nfloat\n\n\nint_rate_input\nfloat\n\npct - eg. 4.1, 2.3, etc.\n\n\nnum_periods\nint\n\nint\n\n\nfirst_pmt_date\nstr\n\nstr representation of date - eg. ‘1-may-2020’\n\n\namt_inputs\nlist\nNone\nlist[tuple] - where each tuple has 2 elements: new amount and effective date. if the amounts are constant, use None\n\n\n_export\nbool\nTrue\nif True, exports excel file showing work\n\n\n_export_rf\nbool\nTrue\nif True, exports excel file with roll_fwd amts\n\n\nReturns\ntuple\n\n(pv amount, df showing work, rf df)\n\n\n\n\n\nCode\n# * TEST\npv, _, __ = calc_pv(\n    monthly_pmt=1389.93,\n    int_rate_input=4.1,\n    num_periods=64,\n    first_pmt_date=\"1-may-2020\",\n    amt_inputs=None,  # constant amt\n    _export=False,\n    _export_rf=False,\n)\nassert pv == 80203.86\n\n# changing amts\npv, _, __ = calc_pv(\n    monthly_pmt=74,\n    int_rate_input=2.3,\n    num_periods=40,\n    first_pmt_date=\"1-may-2020\",\n    amt_inputs=[(80.58, \"1-may-2021\")],\n    _export=False,\n    _export_rf=False,\n)\nassert pv == 3028.87\n\n\n\n\nCode\n# * DOC\npv, work, rf = calc_pv(\n    monthly_pmt=509.88,\n    int_rate_input=4.4,\n    num_periods=19,\n    first_pmt_date=\"1-apr-2023\",\n    _export=False,\n    _export_rf=False,\n)\npv\n\n\n9381.67\n\n\n\n\nCode\n# * DOC\nwork\n\n\n\n\n\n\n\n\n\n\ncompounded_int\namt\npmt_no\nmonth\nmult\nmonthly_rate\npv@1-apr-2023\n\n\n\n\n0\n1.070555\n509.88\n1\n2023-04-01\n545.854758\n0.003595\n9381.668418\n\n\n1\n1.066721\n509.88\n2\n2023-05-01\n543.899582\n\n\n\n\n2\n1.062900\n509.88\n3\n2023-06-01\n541.951410\n\n\n\n\n3\n1.059093\n509.88\n4\n2023-07-01\n540.010215\n\n\n\n\n4\n1.055299\n509.88\n5\n2023-08-01\n538.075974\n\n\n\n\n5\n1.051519\n509.88\n6\n2023-09-01\n536.148661\n\n\n\n\n6\n1.047753\n509.88\n7\n2023-10-01\n534.228251\n\n\n\n\n7\n1.044000\n509.88\n8\n2023-11-01\n532.314720\n\n\n\n\n8\n1.040261\n509.88\n9\n2023-12-01\n530.408043\n\n\n\n\n9\n1.036534\n509.88\n10\n2024-01-01\n528.508195\n\n\n\n\n10\n1.032822\n509.88\n11\n2024-02-01\n526.615153\n\n\n\n\n11\n1.029122\n509.88\n12\n2024-03-01\n524.728891\n\n\n\n\n12\n1.025436\n509.88\n13\n2024-04-01\n522.849385\n\n\n\n\n13\n1.021763\n509.88\n14\n2024-05-01\n520.976611\n\n\n\n\n14\n1.018103\n509.88\n15\n2024-06-01\n519.110546\n\n\n\n\n15\n1.014457\n509.88\n16\n2024-07-01\n517.251164\n\n\n\n\n16\n1.010823\n509.88\n17\n2024-08-01\n515.398442\n\n\n\n\n17\n1.007202\n509.88\n18\n2024-09-01\n513.552357\n\n\n\n\n18\n1.003595\n509.88\n19\n2024-10-01\n511.712884\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# * DOC\nrf\n\n\n\n\n\n\n\n\n\n\npmt_date\nnum_months\namt_100pct\namt_71pct\n\n\n\n\n0\n2024-06-01\n14\n9865.01\n7004.16\n\n\n1\n2024-07-01\n15\n9900.47\n7029.33\n\n\n2\n2024-08-01\n16\n9936.06\n7054.60\n\n\n3\n2024-09-01\n17\n9971.78\n7079.96\n\n\n4\n2024-10-01\n18\n10007.62\n7105.41\n\n\n5\n2024-11-01\n19\n10043.60\n7130.96\n\n\n6\n2024-12-01\n20\n10079.70\n7156.59\n\n\n7\n2025-01-01\n21\n10115.93\n7182.31\n\n\n8\n2025-02-01\n22\n10152.30\n7208.13\n\n\n9\n2025-03-01\n23\n10188.79\n7234.04\n\n\n10\n2025-04-01\n24\n10225.42\n7260.05\n\n\n11\n2025-05-01\n25\n10262.18\n7286.15\n\n\n12\n2025-06-01\n26\n10299.07\n7312.34\n\n\n13\n2025-07-01\n27\n10336.09\n7338.62\n\n\n14\n2025-08-01\n28\n10373.25\n7365.01\n\n\n15\n2025-09-01\n29\n10410.53\n7391.48\n\n\n16\n2025-10-01\n30\n10447.96\n7418.05\n\n\n17\n2025-11-01\n31\n10485.52\n7444.72\n\n\n18\n2025-12-01\n32\n10523.21\n7471.48\n\n\n19\n2026-01-01\n33\n10561.04\n7498.34\n\n\n20\n2026-02-01\n34\n10599.00\n7525.29\n\n\n21\n2026-03-01\n35\n10637.10\n7552.34\n\n\n22\n2026-04-01\n36\n10675.34\n7579.49\n\n\n23\n2026-05-01\n37\n10713.71\n7606.73\n\n\n24\n2026-06-01\n38\n10752.23\n7634.08\n\n\n25\n2026-07-01\n39\n10790.88\n7661.52\n\n\n26\n2026-08-01\n40\n10829.67\n7689.07\n\n\n27\n2026-09-01\n41\n10868.60\n7716.71\n\n\n28\n2026-10-01\n42\n10907.67\n7744.45\n\n\n29\n2026-11-01\n43\n10946.88\n7772.28\n\n\n30\n2026-12-01\n44\n10986.23\n7800.22\n\n\n31\n2027-01-01\n45\n11025.72\n7828.26\n\n\n32\n2027-02-01\n46\n11065.36\n7856.41\n\n\n33\n2027-03-01\n47\n11105.13\n7884.64\n\n\n34\n2027-04-01\n48\n11145.05\n7912.99\n\n\n35\n2027-05-01\n49\n11185.12\n7941.44\n\n\n36\n2027-06-01\n50\n11225.32\n7969.98\n\n\n37\n2027-07-01\n51\n11265.68\n7998.63\n\n\n38\n2027-08-01\n52\n11306.17\n8027.38\n\n\n39\n2027-09-01\n53\n11346.82\n8056.24\n\n\n40\n2027-10-01\n54\n11387.61\n8085.20\n\n\n41\n2027-11-01\n55\n11428.54\n8114.26\n\n\n42\n2027-12-01\n56\n11469.62\n8143.43\n\n\n43\n2028-01-01\n57\n11510.85\n8172.70\n\n\n44\n2028-02-01\n58\n11552.23\n8202.08\n\n\n45\n2028-03-01\n59\n11593.76\n8231.57\n\n\n46\n2028-04-01\n60\n11635.44\n8261.16\n\n\n47\n2028-05-01\n61\n11677.26\n8290.85\n\n\n48\n2028-06-01\n62\n11719.24\n8320.66\n\n\n49\n2028-07-01\n63\n11761.37\n8350.57\n\n\n50\n2028-08-01\n64\n11803.65\n8380.59\n\n\n51\n2028-09-01\n65\n11846.08\n8410.72\n\n\n52\n2028-10-01\n66\n11888.66\n8440.95\n\n\n53\n2028-11-01\n67\n11931.40\n8471.29\n\n\n54\n2028-12-01\n68\n11974.29\n8501.75\n\n\n55\n2029-01-01\n69\n12017.33\n8532.30\n\n\n56\n2029-02-01\n70\n12060.53\n8562.98\n\n\n57\n2029-03-01\n71\n12103.88\n8593.75\n\n\n58\n2029-04-01\n72\n12147.39\n8624.65\n\n\n59\n2029-05-01\n73\n12191.06\n8655.65",
    "crumbs": [
      "01_srs_pv"
    ]
  },
  {
    "objectID": "ntcl_retro.html",
    "href": "ntcl_retro.html",
    "title": "03_ntcl_retro",
    "section": "",
    "text": "00 ntcl retro\n\nsource\n\ncalc_retro\n\n calc_retro (dor:pandas._libs.tslibs.timestamps.Timestamp,\n             pmt_date:pandas._libs.tslibs.timestamps.Timestamp,\n             monthly_pmt:float, rates:dict=None, amt_inputs:list=None,\n             _export:bool=True)\n\n…\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndor\nTimestamp\n\ncan be formatted as str\n\n\npmt_date\nTimestamp\n\ncan be formatted as str\n\n\nmonthly_pmt\nfloat\n\nfor 1st month(s), if amounts change\n\n\nrates\ndict\nNone\nCANSIM B14045\n\n\namt_inputs\nlist\nNone\nlist[tuple] - where each tuple has 2 elements: new amount and effective date. if the amounts are constant, use None\n\n\n_export\nbool\nTrue\nif True, exports excel file showing work\n\n\nReturns\nDataFrame\n\npd.DataFrame\n\n\n\n\n\nCode\n# * TEST\npmt_date = \"1-mar-2023\"\ndor = \"1-aug-2016\"\nmonthly_pmt = 651.86\namt_inputs = [(530.48, \"1-apr-2020\")]\n\ndf = calc_retro(dor, pmt_date, monthly_pmt, RATES, amt_inputs, False)\nassert fix_round(df.monthly_pen_w_int.sum(), 2) == 49785.65",
    "crumbs": [
      "03_ntcl_retro"
    ]
  }
]