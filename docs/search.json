[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "interest_calcs",
    "section": "",
    "text": "All interest calc related scripts/functions I’ve used at TH\nDocumentation",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "interest_calcs",
    "section": "Installation",
    "text": "Installation\n!git clone https://github.com/pyronone/interest_calcs.git\n%cd './interest_calcs'\n!pip install -e \".[dev]\"",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "index.html#quick-example",
    "href": "index.html#quick-example",
    "title": "interest_calcs",
    "section": "Quick Example",
    "text": "Quick Example\n\nfrom interest_calcs.srs import calc_pv\n\npv, work, rf = calc_pv(\n    int_rate_input=2.3,\n    num_periods=40,\n    amt_inputs=[(74.00, \"1-may-2020\"), (80.58, \"1-may-2021\")],\n)\npv\n\n3028.87\n\n\n\nwork.head(15)\n\n\n\n\n\n\n\n\ncompounded_int\namt\npmt_no\nmonth\nmult\nmonthly_rate\npv@1-may-2020\n\n\n\n\n0\n1.078745\n74.00\n1\n2020-05-01\n79.827127\n0.001897\n3028.871251\n\n\n1\n1.076703\n74.00\n2\n2020-06-01\n79.676001\n\n\n\n\n2\n1.074664\n74.00\n3\n2020-07-01\n79.525162\n\n\n\n\n3\n1.072630\n74.00\n4\n2020-08-01\n79.374607\n\n\n\n\n4\n1.070599\n74.00\n5\n2020-09-01\n79.224338\n\n\n\n\n5\n1.068572\n74.00\n6\n2020-10-01\n79.074354\n\n\n\n\n6\n1.066549\n74.00\n7\n2020-11-01\n78.924653\n\n\n\n\n7\n1.064530\n74.00\n8\n2020-12-01\n78.775236\n\n\n\n\n8\n1.062515\n74.00\n9\n2021-01-01\n78.626102\n\n\n\n\n9\n1.060503\n74.00\n10\n2021-02-01\n78.477250\n\n\n\n\n10\n1.058496\n74.00\n11\n2021-03-01\n78.328679\n\n\n\n\n11\n1.056492\n74.00\n12\n2021-04-01\n78.180390\n\n\n\n\n12\n1.054492\n80.58\n13\n2021-05-01\n84.970937\n\n\n\n\n13\n1.052495\n80.58\n14\n2021-06-01\n84.810073\n\n\n\n\n14\n1.050503\n80.58\n15\n2021-07-01\n84.649514\n\n\n\n\n\n\n\n\n\n\nrf.head(10)\n\n\n\n\n\n\n\n\npmt_date\nnum_months\namt_100pct\namt_71pct\n\n\n\n\n0\n2025-02-01\n57\n3374.35\n2395.79\n\n\n1\n2025-03-01\n58\n3380.75\n2400.33\n\n\n2\n2025-04-01\n59\n3387.16\n2404.88\n\n\n3\n2025-05-01\n60\n3393.59\n2409.45\n\n\n4\n2025-06-01\n61\n3400.02\n2414.01\n\n\n5\n2025-07-01\n62\n3406.47\n2418.59\n\n\n6\n2025-08-01\n63\n3412.93\n2423.18\n\n\n7\n2025-09-01\n64\n3419.41\n2427.78\n\n\n8\n2025-10-01\n65\n3425.89\n2432.38\n\n\n9\n2025-11-01\n66\n3432.39\n2437.00",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "index.html#changelog",
    "href": "index.html#changelog",
    "title": "interest_calcs",
    "section": "Changelog",
    "text": "Changelog\n\n1.0.1\n\nupdated minimum Python version to 3.10\n\n\n\n0.1.1\n\nremoved unused modules",
    "crumbs": [
      "interest_calcs"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "00_core",
    "section": "",
    "text": "00 init\n\n\nsetupLogger\n\n setupLogger (name:str='log', serialize:bool=False)\n\nadd handler attached to &lt;name&gt;.log @ trace level and up\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nname\nstr\nlog\nstr\n\n\nserialize\nbool\nFalse\nbool\n\n\nReturns\nNone\n\n\n\n\n\n\n\n\nloadSerializedLog\n\n loadSerializedLog (log_fp:str, incl_full_record:bool=False,\n                    incl_unix_ts:bool=False)\n\n-&gt; pd.DataFrame\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlog_fp\nstr\n\nstr\n\n\nincl_full_record\nbool\nFalse\nbool\n\n\nincl_unix_ts\nbool\nFalse\nbool\n\n\nReturns\nDataFrame\n\npd.DataFrame\n\n\n\n\n\n\nfp\n\n fp (_path:str='', ambiguous_err:bool=True)\n\nFor referencing relative file paths in dev env. Assumes core is always one level down from project root directory.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\n_path\nstr\n\nstr - eg. \"../dat/some_file.csv\" == \"&lt;project_root&gt;/dat/some_file.csv&gt;\"\n\n\nambiguous_err\nbool\nTrue\nbool - if True, will raise exception if path is ambiguous when running docs generation vs dev env\n\n\nReturns\nstr\n\nstr\n\n\n\n\n\n\nyaml_helper\n\n yaml_helper (fpath:str='./config.yaml', mode:str='r',\n              data:Optional[dict]=None)\n\nHelper function to read, write, append to files in yaml format. Checks for duplicate keys if reading or appending.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfpath\nstr\n./config.yaml\nstr\n\n\nmode\nstr\nr\nstr - r / a / w\n\n\ndata\nOptional\nNone\ncannot be None if writing or appending\n\n\nReturns\ndict\n\ndict - data if reading, {‘r’: 0} if writing/appending\n\n\n\n\n\n\n01 fxs\n\n\nfix_round\n\n fix_round (num:float|int, position:int=0)\n\nPython’s built-in round function can return unexpected results. See https://docs.python.org/3/library/functions.html#round. This function returns the same result as the Excel ROUND function.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnum\nfloat | int\n\nfloat | int\n\n\nposition\nint\n0\nint\n\n\nReturns\nfloat\n\nfloat\n\n\n\n\n\nTests\nwith pytest.raises(Exception, match=\"Invalid input\"):\n    fix_round(\"test\", 123)  # type: ignore\n\nassert round(23.335, 2) == 23.34\nassert round(23.345, 2) == 23.34\nassert fix_round(23.345, 2) == 23.35\n\nassert round(-23.345, 2) == -23.34\nassert fix_round(-23.345, 2) == -23.35\n\nassert fix_round(1, 2) == 1\nassert isinstance((fix_round(1, 2)), float)\n\nassert fix_round(1.0, 2) == 1\nassert isinstance((fix_round(1.0, 2)), float)\n\nassert round(6789.2342335, 6) == 6789.234234\nassert round(6789.2342345, 6) == 6789.234234\nassert fix_round(6789.2342345, 6) == 6789.234235\n\nassert round(-6789.2342345, 6) == -6789.234234\nassert fix_round(-6789.2342345, 6) == -6789.234235\n\nassert fix_round(0.0, 2) == 0.0\nassert fix_round(-0.0, 2) == 0.0",
    "crumbs": [
      "00_core"
    ]
  },
  {
    "objectID": "srs.html",
    "href": "srs.html",
    "title": "01_srs",
    "section": "",
    "text": "calc_pv (int_rate_input:float|int, num_periods:int,\n          amt_inputs:list[tuple])\n\nCalculate present value of remaining guarantee balance where amounts may not be constant but interest rates are. Exports dfs showing work and roll fwd amts.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nint_rate_input\nfloat | int\npct - eg. 4.1, 2.3, etc.\n\n\nnum_periods\nint\nint\n\n\namt_inputs\nlist\nlist[tuple] - where each tuple has 2 elements: amount and effective date.\n\n\nReturns\ntuple\n(pv amount, df showing work, rf df)\n\n\n\n\n\nTests\nint_rate_input = 2.3\nnum_periods = 40\namt_inputs = [(80.58, \"1-may-2021\"), (74, \"1-may-2020\")]\n\nres = calc_pv(int_rate_input, num_periods, amt_inputs)\nassert res[0] == 3028.87\n\n\n\n\nTests\nint_rate_input = 4.1\nnum_periods = 64\namt_inputs = [(1389.93, \"1-may-2020\")]\n\nres = calc_pv(int_rate_input, num_periods, amt_inputs)\nassert res[0] == 80203.86\n\n\n\nint_rate_input = 2.3\nnum_periods = 40\namt_inputs = [(80.58, \"1-may-2021\"), (74, \"1-may-2020\")]\n\nres = calc_pv(int_rate_input, num_periods, amt_inputs)\nassert res[0] == 3028.87\n\n\nres[1].head(15)\n\n\n\n\n\n\n\n\ncompounded_int\namt\npmt_no\nmonth\nmult\nmonthly_rate\npv@1-may-2020\n\n\n\n\n0\n1.078745\n74.00\n1\n2020-05-01\n79.827127\n0.001897\n3028.871251\n\n\n1\n1.076703\n74.00\n2\n2020-06-01\n79.676001\n\n\n\n\n2\n1.074664\n74.00\n3\n2020-07-01\n79.525162\n\n\n\n\n3\n1.072630\n74.00\n4\n2020-08-01\n79.374607\n\n\n\n\n4\n1.070599\n74.00\n5\n2020-09-01\n79.224338\n\n\n\n\n5\n1.068572\n74.00\n6\n2020-10-01\n79.074354\n\n\n\n\n6\n1.066549\n74.00\n7\n2020-11-01\n78.924653\n\n\n\n\n7\n1.064530\n74.00\n8\n2020-12-01\n78.775236\n\n\n\n\n8\n1.062515\n74.00\n9\n2021-01-01\n78.626102\n\n\n\n\n9\n1.060503\n74.00\n10\n2021-02-01\n78.477250\n\n\n\n\n10\n1.058496\n74.00\n11\n2021-03-01\n78.328679\n\n\n\n\n11\n1.056492\n74.00\n12\n2021-04-01\n78.180390\n\n\n\n\n12\n1.054492\n80.58\n13\n2021-05-01\n84.970937\n\n\n\n\n13\n1.052495\n80.58\n14\n2021-06-01\n84.810073\n\n\n\n\n14\n1.050503\n80.58\n15\n2021-07-01\n84.649514\n\n\n\n\n\n\n\n\n\n\nres[2].head(10)\n\n\n\n\n\n\n\n\npmt_date\nnum_months\namt_100pct\namt_71pct\n\n\n\n\n0\n2025-02-01\n57\n3374.35\n2395.79\n\n\n1\n2025-03-01\n58\n3380.75\n2400.33\n\n\n2\n2025-04-01\n59\n3387.16\n2404.88\n\n\n3\n2025-05-01\n60\n3393.59\n2409.45\n\n\n4\n2025-06-01\n61\n3400.02\n2414.01\n\n\n5\n2025-07-01\n62\n3406.47\n2418.59\n\n\n6\n2025-08-01\n63\n3412.93\n2423.18\n\n\n7\n2025-09-01\n64\n3419.41\n2427.78\n\n\n8\n2025-10-01\n65\n3425.89\n2432.38\n\n\n9\n2025-11-01\n66\n3432.39\n2437.00",
    "crumbs": [
      "01_srs"
    ]
  },
  {
    "objectID": "srs.html#main",
    "href": "srs.html#main",
    "title": "01_srs",
    "section": "",
    "text": "calc_pv (int_rate_input:float|int, num_periods:int,\n          amt_inputs:list[tuple])\n\nCalculate present value of remaining guarantee balance where amounts may not be constant but interest rates are. Exports dfs showing work and roll fwd amts.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nint_rate_input\nfloat | int\npct - eg. 4.1, 2.3, etc.\n\n\nnum_periods\nint\nint\n\n\namt_inputs\nlist\nlist[tuple] - where each tuple has 2 elements: amount and effective date.\n\n\nReturns\ntuple\n(pv amount, df showing work, rf df)\n\n\n\n\n\nTests\nint_rate_input = 2.3\nnum_periods = 40\namt_inputs = [(80.58, \"1-may-2021\"), (74, \"1-may-2020\")]\n\nres = calc_pv(int_rate_input, num_periods, amt_inputs)\nassert res[0] == 3028.87\n\n\n\n\nTests\nint_rate_input = 4.1\nnum_periods = 64\namt_inputs = [(1389.93, \"1-may-2020\")]\n\nres = calc_pv(int_rate_input, num_periods, amt_inputs)\nassert res[0] == 80203.86\n\n\n\nint_rate_input = 2.3\nnum_periods = 40\namt_inputs = [(80.58, \"1-may-2021\"), (74, \"1-may-2020\")]\n\nres = calc_pv(int_rate_input, num_periods, amt_inputs)\nassert res[0] == 3028.87\n\n\nres[1].head(15)\n\n\n\n\n\n\n\n\ncompounded_int\namt\npmt_no\nmonth\nmult\nmonthly_rate\npv@1-may-2020\n\n\n\n\n0\n1.078745\n74.00\n1\n2020-05-01\n79.827127\n0.001897\n3028.871251\n\n\n1\n1.076703\n74.00\n2\n2020-06-01\n79.676001\n\n\n\n\n2\n1.074664\n74.00\n3\n2020-07-01\n79.525162\n\n\n\n\n3\n1.072630\n74.00\n4\n2020-08-01\n79.374607\n\n\n\n\n4\n1.070599\n74.00\n5\n2020-09-01\n79.224338\n\n\n\n\n5\n1.068572\n74.00\n6\n2020-10-01\n79.074354\n\n\n\n\n6\n1.066549\n74.00\n7\n2020-11-01\n78.924653\n\n\n\n\n7\n1.064530\n74.00\n8\n2020-12-01\n78.775236\n\n\n\n\n8\n1.062515\n74.00\n9\n2021-01-01\n78.626102\n\n\n\n\n9\n1.060503\n74.00\n10\n2021-02-01\n78.477250\n\n\n\n\n10\n1.058496\n74.00\n11\n2021-03-01\n78.328679\n\n\n\n\n11\n1.056492\n74.00\n12\n2021-04-01\n78.180390\n\n\n\n\n12\n1.054492\n80.58\n13\n2021-05-01\n84.970937\n\n\n\n\n13\n1.052495\n80.58\n14\n2021-06-01\n84.810073\n\n\n\n\n14\n1.050503\n80.58\n15\n2021-07-01\n84.649514\n\n\n\n\n\n\n\n\n\n\nres[2].head(10)\n\n\n\n\n\n\n\n\npmt_date\nnum_months\namt_100pct\namt_71pct\n\n\n\n\n0\n2025-02-01\n57\n3374.35\n2395.79\n\n\n1\n2025-03-01\n58\n3380.75\n2400.33\n\n\n2\n2025-04-01\n59\n3387.16\n2404.88\n\n\n3\n2025-05-01\n60\n3393.59\n2409.45\n\n\n4\n2025-06-01\n61\n3400.02\n2414.01\n\n\n5\n2025-07-01\n62\n3406.47\n2418.59\n\n\n6\n2025-08-01\n63\n3412.93\n2423.18\n\n\n7\n2025-09-01\n64\n3419.41\n2427.78\n\n\n8\n2025-10-01\n65\n3425.89\n2432.38\n\n\n9\n2025-11-01\n66\n3432.39\n2437.00",
    "crumbs": [
      "01_srs"
    ]
  }
]